다시하기 처리하기
게임 상세정보 만들기
배경 만들기

게임모드 변경 버튼 리스트로 바꾸기
키보드 바꾸기 (api도)
등록된 소환사 없을 때 화면 만들기

const [favorite, setFavorite] = useState([]); //검색기록 리스트
const [isFavoriteVisible, setFavoriteVisible] = useState(false); //검색기록 화면 여부

const saveFavorite = async (favTerm) => {
    const Favorite = await AsyncStorage.getItem('Favorite');
    let favorite = [];
    if (favorite) {
      favorite = JSON.parse(favorite);
    }
    // 중복 검색어 제거를 위한 처리
    favorite = favorite.filter(item => item.name !== favTerm.name);
    // 최대 10개의 검색 기록 유지
    if (favorite.length >= 10) {
      favorite.pop();
    }
    favorite.unshift(favTerm);
    await AsyncStorage.setItem('Favorite', JSON.stringify(favorite));
  } // 검색기록 저장
  const getFavorite = async () => {
    const favorite = await AsyncStorage.getItem('Favorite');
    return favorite ? JSON.parse(favorite) : [];
  } // 검색기록 불러오기
  const openFavorite = () => {
    if(!isFavoriteVisible){loadFavorite()}
    setFavoriteVisible(!isFavoriteVisible)
  } // 검색기록 창 열고닫기 ('검색기록' 버튼 전용)
  const closeFavorite = () => {
    setFavoriteVisible(false)
    Keyboard.dismiss()
  } // 검색기록 창 닫기 (검색기록 창 내의 X 버튼 전용)
  const loadFavorite = async () => {
    const favorite = await getFavorite();
    setFavorite(favorite);
  }; // 검색기록 불러와서 Favorite에 넣기
  const removeValueFromFavorite = async (valueToRemove) => {
    const favorite = await AsyncStorage.getItem('Favorite');
    if (favorite) {
      const updatedFavorite = JSON.parse(favorite).filter(item => item.name !== valueToRemove.name);
      await AsyncStorage.setItem('Favorite', JSON.stringify(updatedFavorite));
      setFavorite(updatedFavorite)
    }
  } // 검색기록 하나씩 지우기
  const clearFavStorage = async () => {
      await AsyncStorage.clear();
      setFavoriteVisible(false)
  } // 검색기록 초기화